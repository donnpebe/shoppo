// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/donnpebe/shoppo/pkg/domain (interfaces: PromotionCondition)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/donnpebe/shoppo/pkg/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockPromotionCondition is a mock of PromotionCondition interface.
type MockPromotionCondition struct {
	ctrl     *gomock.Controller
	recorder *MockPromotionConditionMockRecorder
}

// MockPromotionConditionMockRecorder is the mock recorder for MockPromotionCondition.
type MockPromotionConditionMockRecorder struct {
	mock *MockPromotionCondition
}

// NewMockPromotionCondition creates a new mock instance.
func NewMockPromotionCondition(ctrl *gomock.Controller) *MockPromotionCondition {
	mock := &MockPromotionCondition{ctrl: ctrl}
	mock.recorder = &MockPromotionConditionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPromotionCondition) EXPECT() *MockPromotionConditionMockRecorder {
	return m.recorder
}

// CalculateDiscount mocks base method.
func (m *MockPromotionCondition) CalculateDiscount(arg0 *domain.Order) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateDiscount", arg0)
	ret0, _ := ret[0].(float64)
	return ret0
}

// CalculateDiscount indicates an expected call of CalculateDiscount.
func (mr *MockPromotionConditionMockRecorder) CalculateDiscount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateDiscount", reflect.TypeOf((*MockPromotionCondition)(nil).CalculateDiscount), arg0)
}
